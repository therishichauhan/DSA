!function(){let a=document.createElement("template");a.innerHTML=`
    <style>
      :host {
        display: flex;
        flex-wrap: wrap;
      }
      ::slotted(gfg-panel) {
        flex-basis: 100%;
      }
    </style>
    <slot name="tab"></slot>
    <slot name="panel"></slot>
  `;class b extends HTMLElement{constructor(){super(),this._onSlotChange=this._onSlotChange.bind(this),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(a.content.cloneNode(!0)),this._tabSlot=this.shadowRoot.querySelector("slot[name=tab]"),this._panelSlot=this.shadowRoot.querySelector("slot[name=panel]"),this._tabSlot.addEventListener("slotchange",this._onSlotChange),this._panelSlot.addEventListener("slotchange",this._onSlotChange)}connectedCallback(){this.addEventListener("click",this._onClick),this.hasAttribute("role")||this.setAttribute("role","tablist"),Promise.all([customElements.whenDefined("gfg-tab"),customElements.whenDefined("gfg-panel"),]).then(_=>this._linkPanels())}disconnectedCallback(){this.removeEventListener("keydown",this._onKeyDown),this.removeEventListener("click",this._onClick)}_onSlotChange(){this._linkPanels()}_linkPanels(){let a=this._allTabs();a.forEach(a=>{let b=a.nextElementSibling;if("gfg-panel"!==b.tagName.toLowerCase()){console.error(`Tab #${a.id} is not asibling of a <gfg-panel>`);return}a.setAttribute("aria-controls",b.id),b.setAttribute("aria-labelledby",a.id)});let b=a.find(a=>a.selected)||a[0];this._selectTab(b)}_allPanels(){return Array.from(this.querySelectorAll("gfg-panel"))}_allTabs(){return Array.from(this.querySelectorAll("gfg-tab"))}_panelForTab(b){let a=b.getAttribute("aria-controls");if(""!==a)return this.querySelector(`#${a}`)}reset(){let a=this._allTabs(),b=this._allPanels();a.forEach(a=>a.selected=!1),b.forEach(a=>a.hidden=!0)}_selectTab(a){this.reset();let b=a.nextElementSibling;if(!b)throw new Error("No panel with id");a.selected=!0,b.hidden=!1}_onClick(a){"tab"===a.target.getAttribute("role")&&this._selectTab(a.target)}}customElements.define("gfg-tabs",b);let e=0;class c extends HTMLElement{static get observedAttributes(){return["selected"]}connectedCallback(){this.setAttribute("role","tab"),this.id||(this.id=`gfg-tab-generated-${e++}`),this.setAttribute("aria-selected","false"),this.setAttribute("tabindex",-1),this._upgradeProperty("selected")}_upgradeProperty(a){if(this.hasOwnProperty(a)){let b=this[a];delete this[a],this[a]=b}}attributeChangedCallback(){let a=this.hasAttribute("selected");this.setAttribute("aria-selected",a),this.setAttribute("tabindex",a?0:-1)}set selected(a){(a=Boolean(a))?this.setAttribute("selected",""):this.removeAttribute("selected")}get selected(){return this.hasAttribute("selected")}}customElements.define("gfg-tab",c);let f=0;class d extends HTMLElement{connectedCallback(){this.setAttribute("role","tabpanel"),this.id||(this.id=`gfg-panel-generated-${f++}`)}}customElements.define("gfg-panel",d)}()
